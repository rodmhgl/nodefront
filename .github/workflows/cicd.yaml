name: cicd

on:
  push:
    paths:
      - src/**
      - Dockerfile
      - requirements.txt
      - requirements-dev.txt
    branches:
      - main
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Lint with flake8
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Format check with black
        run: |
          black --check --diff src/

      - name: Import sorting check with isort
        run: |
          isort --check-only --diff src/

      - name: Run tests
        run: |
          # Create a basic test if none exists
          if [ ! -d "tests" ] && [ ! -f "test_*.py" ]; then
            mkdir -p tests
            cat > tests/test_app.py << 'EOF'
          import pytest
          import sys
          import os
          
          # Add src directory to path
          sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))
          
          from app import app, create_app
          
          @pytest.fixture
          def client():
              app.config['TESTING'] = True
              with app.test_client() as client:
                  yield client
          
          def test_health_check(client):
              """Test health check endpoint"""
              rv = client.get('/healthcheck.html')
              assert rv.status_code == 200
              assert b'healthy' in rv.data
          
          def test_main_page(client):
              """Test main page loads"""
              rv = client.get('/')
              assert rv.status_code == 200
              assert b'Environment Display' in rv.data
          
          def test_api_endpoint(client):
              """Test API endpoint"""
              rv = client.get('/api/env')
              assert rv.status_code == 200
              assert rv.content_type == 'application/json'
          EOF
          fi
          
          # Run tests
          python -m pytest tests/ -v --tb=short || python -m pytest . -v --tb=short -k "test_" || echo "No tests found, skipping test execution"

      # - name: Security check with bandit
      #   run: |
      #     bandit -r src/ -f json -o bandit-report.json
      #     if [ $? -ne 0 ]; then
      #       echo "Security issues found! Check bandit-report.json for details."
      #       cat bandit-report.json
      #       exit 1
      #     fi


      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            rodstewart/nodefront
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-,format=short
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract SHA tag from Docker meta
        id: extract_sha_tag
        run: |
          # Parse Docker meta JSON output to find SHA-based tag
          echo '${{ steps.meta.outputs.json }}' | jq -r '.tags[] | select(contains("main-")) | split(":")[1]' | head -1 > sha_tag.txt
          sha_tag=$(cat sha_tag.txt)
          echo "Extracted SHA tag: $sha_tag"
          echo "tag=$sha_tag" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

    outputs:
      docker_meta_version: ${{ steps.meta.outputs.version }}
      docker_sha_tag: ${{ steps.extract_sha_tag.outputs.tag }}

  cd:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Update Development Environment Values
        run: |
          echo "Updating development image tag to: ${{ needs.ci.outputs.docker_sha_tag }}"
          
          # Get current tag
          current_tag=$(yq '.image.tag' helm/myapp/values/development.yaml)
          new_tag="${{ needs.ci.outputs.docker_sha_tag }}"
          
          echo "Current tag: $current_tag"
          echo "New tag: $new_tag"
          
          if [ "$current_tag" != "$new_tag" ]; then
            yq -i ".image.tag = \"$new_tag\"" helm/myapp/values/development.yaml
            echo "Tag updated successfully"
          else
            echo "Tag unchanged, skipping update"
          fi
      
      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          message: 'Update image tag in development to ${{ needs.ci.outputs.docker_sha_tag }}'
          add: 'helm/myapp/values/development.yaml'
          default_author: github_actions
