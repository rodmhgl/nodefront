kind: Deployment
apiVersion: apps/v1
metadata:
  name: myapp
spec:
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
        appid: "123456"
    spec:
      automountServiceAccountToken: false
      serviceAccountName: default
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - name: myapp
          image: rodstewart/nodefront:main
          imagePullPolicy: Always
          resources:
            requests:
              memory: "64Mi"
              cpu: "20m"
            limits:
              memory: "128Mi"
              cpu: "60m"
          ports:
            - containerPort: 3000
          livenessProbe:
            httpGet:
              path: /healthcheck.html?probe=live
              port: 3000
            periodSeconds: 60
            failureThreshold: 2
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /healthcheck.html?probe=ready
              port: 3000
            periodSeconds: 15
            failureThreshold: 4
            timeoutSeconds: 2
          startupProbe:
            httpGet:
              path: /healthcheck.html?probe=startup
              port: 3000
            periodSeconds: 30
            failureThreshold: 3
            timeoutSeconds: 5
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: myapp-page-files
              mountPath: /app/share
            - name: myapp-secret-store
              mountPath: /mnt/secret-store
          envFrom:
            - configMapRef:
                name: myapp-config
          env:
            - name: FROM_FIELD
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: FROM_SECRET
              valueFrom:
                secretKeyRef:
                  key: myapp-secret-key
                  name: myapp-secret-key
      volumes:
        - name: myapp-page-files
          persistentVolumeClaim:
            claimName: myapp-page-files-pvc
        - name: myapp-secret-store
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: myapp-secret-provider-class
